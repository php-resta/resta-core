<?php

namespace Resta\Authenticate;

trait AuthenticateToken
{
    /**
     * @var null
     */
    public $credentialHash=null;

    /**
     * @return string
     */
    public function getTokenData()
    {
        // the absolute params property must be present
        // in the object and the params value must be the builder key.
        if(property_exists($this,'params') and isset($this->params['builder'])){

            // a real token will be generated after
            // you get the first method of the query builder value.
            $authData = $this->params['data'];

            // we refer to the token closure feature on the config to enable
            // the creation of user-based tokens on the application side.
            return $this->getTokenFromProvider($authData,function() use($authData){
                return md5(sha1($authData->id.'__'.$this->credentialHash.'__'.time().'__'.fingerPrint()));
            });
        }

        return null;
    }

    /**
     * @param $authData
     * @param callable $callback
     * @return mixed
     */
    private function getTokenFromProvider($authData,callable $callback)
    {
        // if the token value is a closure value,
        // we will run a user-based token closure.
        if(app()->has('authenticate.token') && is_callable($token = app()->get('authenticate.token'))){
            return $token($authData);
        }

        // if there is no closure object on the token side,
        // we use the token value directly generated by the kernel.
        return call_user_func($callback);
    }

}