<?php

namespace __modelNamespace__\Helper;

use App\Mobi\Api\V1\Model\TableEvent;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Builder;

trait Event
{
    /**
     * get table changes
     *
     * @param Model $model
     * @param $event
     */
    public function getTableChanges($model,$event)
    {
       $dirty = $model->getDirty();

       $authId = (is_null(auth()->user())) ? '0' : auth()->user()->id;

       if(count($dirty)){
           foreach ($dirty as $field=>$value) {

               if($field!=='updated_at'){
                   TableEvent::insert([
                       'table_name' => $model->getTable(),
                       'table_field' => $field,
                       'old_value'  => $model->getOriginal($field),
                       'new_value'  => $value,
                       'event_name' => $event,
                       'client_ip'         => ip2long(request()->getClientIp()),
                       'auth_id'    => $authId,
                       'created_at' => date('Y-m-d H:i:s')
                   ]);
               }

           }
       }
    }

    protected static function boot()
    {
        parent::boot();

        static::saved(function($model){
            $model->getTableChanges($model,'updated');
        });

        //query filter scope
        $filter     = (!is_null($filter = get('filter'))) ? $filter : [];
        $with       = (!is_null($with = get('with'))) ? $with : [];
        $select     = get('select');

         $selectList = [];

         if(is_array($select) && count($select)){
            foreach ($select as $selectValue){
                if(in_array($selectValue,(new self())->fillable)){
                    $selectList[] = $selectValue;
                }
            }
         }

         $withList = [];

         foreach ($with as $item){
            if(method_exists(new self(),$item)){
                $withList[] = $item;
            }
         }

         static::addGlobalScope('filter', function (Builder $builder) use($filter,$withList,$selectList){

            $builder->authenticate()->ordered();
            $builder->with($withList);

            if(count($selectList)){
                $builder->select($selectList);
            }

            if(count($filter)){
                foreach ($filter as $key=>$item){
                    if(in_array($key,(new self())->fillable)){
                        if($key!=='order'){
                            $builder->where($key,$item);
                        }
                    }
                }

                if(isset($filter['order'])){
                    $builder->orderBy('id',$filter['order']);
                }
            }
            else{
                $builder->orderBy('id','desc');
            }
        });
    }
}
