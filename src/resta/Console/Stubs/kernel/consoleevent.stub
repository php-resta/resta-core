<?php

namespace __kernelProviderDir__;

use Resta\Provider\ServiceProviderManager;

class ConsoleEventServiceProvider extends ServiceProviderManager
{
    /**
     * register service provider
     *
     * @return void
     */
    public function register()
    {
        //your console events should only be run for the console.
        if($this->app->runningInConsole()){

            // by default we have written a migration event.
            // according to your needs you can write the event.
            event()->addListener('console','default',function($args){
                call_user_func_array([$this,'createControllerForMigrationPull'],[$args]);
                call_user_func_array([$this,'createModelForMigrationPush'],[$args]);
                call_user_func_array([$this,'createTestForController'],[$args]);
            });
        }
    }

    /**
     * controller file creating for console event
     *
     * @param array $args
     * @return mixed|void
     */
    private function createControllerForMigrationPull($args=array())
    {
        // if there is a value of migration for the argument values,
        // then a controller will be created when that migration is pull.
        if($args['class']=="migration" && $args['classMethod']=="pull" && isset($args['only']) && isset($args['controller'])){

            $only = $args['only'];

            $controller = $args['controller'];

            $modelName = (substr($only,-1)=='s') ? strtolower(substr($only,0,-1)) : strtolower($only);

            if(isset($args['file'])){
                // The symfony process will be executed as an application method.
                $this->app->command('controller create','controller:'.strtolower($controller).' file:'.strtolower($args['file']).' type:crud stub:crudfile model:'.$modelName.' client:'.strtolower($controller).' clientfile:'.strtolower($args['file']).'');
                $this->app->command('client create','name:'.strtolower($controller).' client:'.strtolower($args['file']).'_create trait:'.strtolower($args['file']));
                $this->app->command('client create','name:'.strtolower($controller).' client:'.strtolower($args['file']).'_update trait:'.strtolower($args['file']).'');
            }
            else{
                // The symfony process will be executed as an application method.
                $this->app->command('controller create','controller:'.strtolower($controller).' type:crud stub:crudfile model:'.$modelName.' client:'.strtolower($only).' clientfile:'.strtolower($controller).'');
                $this->app->command('client create','name:'.strtolower($controller).' client:'.strtolower($controller).'_create');
                $this->app->command('client create','name:'.strtolower($controller).' client:'.strtolower($controller).'_update');
            }
        }
    }

    /**
     * model file creating for console event
     *
     * @param array $args
     * @return mixed|void
     */
    private function createModelForMigrationPush($args=array())
    {
        // if there is a value of migration create and model for the argument values,
        // then a model will be created when that migration is created.
        if($args['class']=="migration" && $args['classMethod']=="push"){

            $args['only'] = $args['table'];

            if(!isset($args['controller'])){
                $args['controller'] = $args['table'];
            }

            $args['classMethod'] = 'pull';

            // The symfony process will be executed as an application method.
            $this->createControllerForMigrationPull($args);
        }
    }

    /**
     * controller test file creating for console event
     *
     * @param array $args
     * @return mixed|void
     */
    private function createTestForController($args=array())
    {
        // if there is a value of controller and create for the argument values,
        // then a test file will be created when that controller is created.
        if($args['class']=="controller" && $args['classMethod']=="create" && isset($args['controller'])){

            // The symfony process will be executed as an application method.
            $this->app->command('test create','controller:'.strtolower($args['controller']).'');
        }
    }
}