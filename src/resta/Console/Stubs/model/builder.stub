<?php

namespace __builderNamespace__;

use Exception;
use __modelNamespace__\__file__;
use Resta\Contracts\ClientContract;
use __contractNamespace__\__file__Contract;
use __builderNamespace__\Assistant\Builder;

class __file__Builder implements __file__Contract
{
    use Builder;

    /**
     * get model name property
     *
     * @var __file__
     */
    protected static $model = __file__::class;

    /**
     * get all data for __file__ model
     *
     * @return mixed
     */
    public function all()
    {
        //model all data
        return static::$model::all();
    }

    /**
     * create __file__ model
     *
     * @param ClientContract $client
     * @return void|mixed
     */
    public function create(ClientContract $client)
    {
        //create User
        try{
            return static::$model::create($client->all());
        }
        catch (Exception $exception){
            exception('database_'.$exception->getCode(),['key'=>'__file-low___code:'.$client->input('__file-low___code')])
                ->invalidArgument(mysqlErrorColumn($exception->getPrevious()));
        }
    }

    /**
     * check if entity is available for model
     *
     * @param null $value
     * @param string $field
     * @return bool
     */
    public function exist($value=null,$field='id') : bool
    {
        $query = $this->find($value,$field);

        return is_array($query) && count($query);
    }

    /**
     * get __file__ find method for model
     *
     * @param null|string $value
     * @param string $field
     * @param array $select
     * @return mixed
     */
    public function find($value=null,$field='id',$select=['*'])
    {
        //model find data
        return static::$model::select($select)->where($field,$value)->get()->toArray();
    }

    /**
     * get __file__ model
     *
     * @return mixed
     */
    public function get()
    {
        //model all data
        return static::$model::pagination();
    }

     /**
      * update __file__ model
      *
      * @param ClientContract $client
      * @param bool $createIfNotExist
      * @return mixed|void
      */
     public function update(ClientContract $client,$createIfNotExist=false)
     {
        //
     }
}

